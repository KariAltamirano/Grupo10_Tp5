/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package grupo10_tp5;

import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Grupo10 TP5 Altamirano Karina Gianfranco Antonacci Matías Bequis
 * Marcos Ezequiel Dave Natalia Quiroga Dorzan Alejo Franzinni Tatiana
 */
public class VentanaBorrarC extends javax.swing.JInternalFrame {
 
    private DefaultTableModel modeloTabla;
    DefaultListModel<String> modeloLista = new DefaultListModel<>();
    public VentanaBorrarC() {
        initComponents();
        modeloTabla = new DefaultTableModel();
        armarCabecera();
        tablaClientes.setModel(modeloTabla);
        llenarListaDNI();

    // Evento: cuando selecciono un DNI en la lista
    listaDni.addListSelectionListener(e -> {
        if (!e.getValueIsAdjusting()) {
            String dniStr = listaDni.getSelectedValue(); // Obtenemos String
            if (dniStr != null) {
                try {
                    Long dni = Long.valueOf(dniStr); // Convertimos a Long
                    mostrarCliente(dni); // Ahora funciona
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this,
                            "El DNI seleccionado no es válido",
                            "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    });

    }
    // Carga todos los DNIs de la lista de contactos en el JList
    private void llenarListaDNI() {
       
       for (Contacto c : Directorio.getTodosLosContactos()) {
            modeloLista.addElement(Long.toString(c.getDni())); // Convertimos Long a String


        }
        listaDni.setModel(modeloLista);
    }

    // Arma la cabecera de la tabla
    private void armarCabecera() {
        modeloTabla.addColumn("DNI");
        modeloTabla.addColumn("Apellido");
        modeloTabla.addColumn("Nombre");
        modeloTabla.addColumn("Dirección");
        modeloTabla.addColumn("Ciudad");
        modeloTabla.addColumn("Teléfono");
    }

    // Muestra el cliente seleccionado en la tabla
    private void mostrarCliente(Long dni) {
        modeloTabla.setRowCount(0); // Limpio la tabla

        for (Contacto c : Directorio.getTodosLosContactos()) {
            if (c.getDni() == dni) {
                modeloTabla.addRow(new Object[]{
                    c.getDni(),
                    c.getApellido(),
                    c.getNombre(),
                    c.getDireccion(),
                    c.getCiudad(),
                    c.getTelefono()
                });
            }
        }
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        txtDni = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaDni = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaClientes = new javax.swing.JTable();
        btnBorrar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("| Borrar Cliente |");

        jLabel2.setText("DNI:");

        txtDni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDniKeyReleased(evt);
            }
        });

        listaDni.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listaDni);

        tablaClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "DNI", "Apellido", "Nombre", "Direccion", "Ciudad", "Telefono"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Long.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tablaClientes);

        btnBorrar.setText("Borrar Cliente/s");
        btnBorrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBorrarActionPerformed(evt);
            }
        });

        btnSalir.setText("Salir");
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnBorrar)
                        .addGap(169, 169, 169)
                        .addComponent(btnSalir))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 482, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 151, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBorrar)
                    .addComponent(btnSalir))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnBorrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBorrarActionPerformed
        // TODO add your handling code here:
        // Verificar si hay un DNI seleccionado en la lista
      // Obtener el DNI seleccionado como String y convertir a Long
    String dniStr = listaDni.getSelectedValue();
    Long dniSeleccionado = null;

    if (dniStr != null) {
        try {
            dniSeleccionado = Long.valueOf(dniStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,
                "El DNI seleccionado no es válido",
                "Error", JOptionPane.ERROR_MESSAGE);
            return; // salir si no es válido
        }
    } else {
        JOptionPane.showMessageDialog(this,
                "Debe seleccionar un DNI para borrar.",
                "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

        Contacto eliminado = null;
        for (Contacto c : Directorio.getTodosLosContactos()) {
            if (c.getDni() == dniSeleccionado) { // compara valores primitivos
        eliminado = c;
        break;

        
        }
    }

    if (eliminado != null) {
        Directorio.getTodosLosContactos().remove(eliminado);
        JOptionPane.showMessageDialog(this,
                "Cliente borrado: " + eliminado.getNombre() + " " + eliminado.getApellido(),
                "Éxito", JOptionPane.INFORMATION_MESSAGE);

        llenarListaDNI();          // refrescar lista
        modeloTabla.setRowCount(0); // limpiar tabla
    } else {
        JOptionPane.showMessageDialog(this,
                "No se encontró cliente con el DNI " + dniSeleccionado,
                "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_btnBorrarActionPerformed

    private void txtDniKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDniKeyReleased
        // TODO add your handling code here:
      modeloLista.clear(); // Limpiamos la lista antes de filtrar

    String textoDni = txtDni.getText().trim(); // Tomamos el texto ingresado
    if (textoDni.isEmpty()) {
        // Si el campo está vacío, mostramos todos los DNIs
        for (Contacto c : Directorio.getTodosLosContactos()) {
            modeloLista.addElement(Long.toString(c.getDni()));
        }
        return;
    }

    // Filtramos los DNIs que comienzan con el texto ingresado
    for (Contacto c : Directorio.getTodosLosContactos()) {
        String dniStr = Long.toString(c.getDni());
        if (dniStr.startsWith(textoDni)) {
            modeloLista.addElement(dniStr);
        }
    }

       

    }//GEN-LAST:event_txtDniKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBorrar;
    private javax.swing.JButton btnSalir;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<String> listaDni;
    private javax.swing.JTable tablaClientes;
    private javax.swing.JTextField txtDni;
    // End of variables declaration//GEN-END:variables
}
